name: CI Docker PHP # Nome do workflow no GitHub Actions

on: [push, pull_request] # Dispara o workflow em todo push/PR

jobs:
  build-test:
    runs-on: ubuntu-latest # Roda em m√°quina Ubuntu fornecida pelo GitHub

    services:
      mysql:
        image: mysql:8.3
        env:
          MYSQL_ROOT_PASSWORD: minhaSenhaSegura
          MYSQL_DATABASE: sistemaphp
        # N√£o exponha a porta do MySQL!
        # ports:
        #   - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Rodar Docker Compose
        run: docker compose up -d --build # Sobe containers do projeto e faz rebuild

      - name: Esperar web subir
        run: | # Aguarda at√© a aplica√ß√£o responder no endpoint informado
          for i in {1..15}; do
            if curl -s http://localhost:8080 > /dev/null; then
              echo "Sistema est√° respondendo";
              break;
            fi;
            echo "Aguardando container web...";
            sleep 5;
          done

      - name: Verificar p√°gina inicial (teste autom√°tico)
        run: | # Teste simples: pede p√°gina inicial e busca por termo esperado
          curl -sSf http://localhost:8080 | grep -qi "Sistema PHP + Docker"
          # Substitua acima por uma palavra/texto presente na tela inicial do sistema

      - name: Instalar depend√™ncias para an√°lise de c√≥digo
        run: | # Instala PHPStan e PHPCS no container web para an√°lise do c√≥digo PHP
          docker exec $(docker ps -qf "name=web") bash -c "apt-get update && apt-get install -y wget git unzip"
          docker exec $(docker ps -qf "name=web") bash -c "wget https://github.com/phpstan/phpstan/releases/latest/download/phpstan.phar"
          docker exec $(docker ps -qf "name=web") bash -c "wget https://github.com/squizlabs/PHP_CodeSniffer/releases/download/3.7.1/phpcs.phar -O phpcs.phar"

      - name: Rodar PHPStan (an√°lise est√°tica HTML)
        run: | # Gera relat√≥rio HTML de an√°lise est√°tica
          docker exec $(docker ps -qf "name=web") bash -c "php phpstan.phar analyse /var/www/html --level=0 --error-format=html --memory-limit=512M > /var/www/html/phpstan-report.html || true"

      - name: Rodar PHPCS (Padr√£o de C√≥digo HTML)
        run: | # Analisa ader√™ncia ao padr√£o PSR-12 do PHP e gera HTML
          docker exec $(docker ps -qf "name=web") bash -c "php phpcs.phar --standard=PSR12 /var/www/html --report=full --report-file=/var/www/html/phpcs-report.html || true"

      - name: Copiar relat√≥rios do container para a m√°quina host
        run: | # Move relat√≥rios para fora do container
          docker cp $(docker ps -qf "name=web"):/var/www/html/phpstan-report.html phpstan-report.html
          docker cp $(docker ps -qf "name=web"):/var/www/html/phpcs-report.html phpcs-report.html

      - name: Gerar Sum√°rio HTML do CI incluindo relat√≥rios
        run: |
          echo '<!DOCTYPE html><html><head>
          <meta charset="utf-8">
          <title>Resumo do CI</title>
          <style>
            body { font-family: Arial, sans-serif; background: #F9FAFB; margin: 2em;}
            .ok { color: #29ab34; }
            .fail { color: #E63946; }
            .step { font-size: 1.1em; margin-bottom: 0.5em;}
            details {margin-bottom: 1.5em;}
            pre, code {font-size: 0.95em; background: #eee; padding: 1em; border-radius: 6px; overflow-x: auto;}
            h2, h3 { margin-top: 2em;}
          </style>
          </head><body>
          <h1>‚öôÔ∏è Resumo da execu√ß√£o do CI</h1>
          <ul>
            <li class="step">üìÅ <span class="ok">Checkout do c√≥digo: OK</span></li>
            <li class="step">üê≥ <span class="ok">Build e containers: OK</span></li>
            <li class="step">üï∏Ô∏è <span class="ok">Testes iniciais de aplica√ß√£o: OK</span></li>
            <li class="step">üîé PHPStan: <span class="ok">Executado</span></li>
            <li class="step">üéØ PHPCS: <span class="ok">Executado</span></li>
          </ul>

          <details open>
            <summary><b>üîé PHPStan Resultados (clique para expandir)</b></summary>
            ' > ci-summary.html

          if [ -f phpstan-report.html ]; then
            echo '<iframe src="phpstan-report.html" style="width:100%;height:400px;border:1px solid #aaa;background:#fff;"></iframe>' >> ci-summary.html
          else
            echo '<p style="color:red;">Arquivo phpstan-report.html n√£o encontrado.</p>' >> ci-summary.html
          fi

          echo '</details>

          <details>
            <summary><b>üéØ PHPCS Resultados (clique para expandir)</b></summary>
            ' >> ci-summary.html

          if [ -f phpcs-report.html ]; then
            echo '<iframe src="phpcs-report.html" style="width:100%;height:400px;border:1px solid #aaa;background:#fff;"></iframe>' >> ci-summary.html
          else
            echo '<p style="color:red;">Arquivo phpcs-report.html n√£o encontrado.</p>' >> ci-summary.html
          fi

          echo '</details>
          <p style="margin-top:4em;font-size:0.93em;color:#888">üöÄ <i>Este relat√≥rio foi gerado automaticamente pela pipeline do GitHub Actions</i></p>
          </body></html>' >> ci-summary.html
        shell: bash

      - name: Upload relat√≥rio resumido e completos
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports-html
          path: |
            ci-summary.html
            phpstan-report.html
            phpcs-report.html

      - name: Fechar containers
        run: docker compose down # Encerra/limpa os containers usados nos testes
